"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_extra_1 = require("fs-extra");
var util_1 = require("util");
var loader_types_1 = require("./loader.types");
/* tslint:disable:no-var-requires */
var parse = util_1.promisify(require("csv-parse"));
var parseSync = require("csv-parse/lib/sync");
/* tslint:enable:no-var-requires */
var Loader = /** @class */ (function () {
    function Loader() {
    }
    Loader.loadCSV = function (option) {
        return __awaiter(this, void 0, void 0, function () {
            var opt, csvBuf, csv;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        opt = new loader_types_1.LoaderOption(option || {});
                        return [4 /*yield*/, fs_extra_1.readFile(opt.filepath)];
                    case 1:
                        csvBuf = _a.sent();
                        return [4 /*yield*/, parse(csvBuf)];
                    case 2:
                        csv = _a.sent();
                        return [4 /*yield*/, Loader.transformCSVBufferToWordList(csv, opt.levelsThreshold)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Loader.loadCSVSync = function (option) {
        var opt = new loader_types_1.LoaderOption(option || {});
        var csvBuf = fs_extra_1.readFileSync(opt.filepath);
        var csv = parseSync(csvBuf);
        return Loader.transformCSVBufferToWordList(csv, opt.levelsThreshold);
    };
    Loader.transformCSVBufferToWordList = function (csv, levelsThreshold) {
        var header = csv[0], arrs = csv.slice(1);
        var levelSize = levelsThreshold.length + 1;
        var wordList = Array.from({ length: levelSize }, function () { return new Array(); });
        var reversedLT = levelsThreshold.reverse();
        for (var _i = 0, arrs_1 = arrs; _i < arrs_1.length; _i++) {
            var _a = arrs_1[_i], word = _a[0], frequency = _a[1];
            var level = Loader.getLevel({ word: word, frequency: frequency }, reversedLT);
            wordList[level].push(word);
        }
        return wordList;
    };
    Loader.getLevel = function (word, reversedLT) {
        // Default is 0, which means this word is super easy :/
        var level = 0;
        reversedLT.forEach(function (max, index) {
            var min = index === 0 ? 0 : reversedLT[index - 1] + 1;
            if (word.frequency > min && word.frequency <= max) {
                level = index + 1;
            }
        });
        return level;
    };
    return Loader;
}());
exports.Loader = Loader;
